ARM GAS  /tmp/ccsyf0P3.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/stm32f4xx_it.c"
  20              		.section	.text.NMI_Handler,"ax",%progbits
  21              		.align	1
  22              		.global	NMI_Handler
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	NMI_Handler:
  28              	.LFB235:
   1:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f4xx_it.c **** /**
   3:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f4xx_it.c ****   * @file    stm32f4xx_it.c
   5:Core/Src/stm32f4xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f4xx_it.c ****   * @attention
   8:Core/Src/stm32f4xx_it.c ****   *
   9:Core/Src/stm32f4xx_it.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/stm32f4xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32f4xx_it.c ****   *
  12:Core/Src/stm32f4xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32f4xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32f4xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32f4xx_it.c ****   *
  16:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32f4xx_it.c ****   */
  18:Core/Src/stm32f4xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32f4xx_it.c **** 
  20:Core/Src/stm32f4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32f4xx_it.c **** #include "main.h"
  22:Core/Src/stm32f4xx_it.c **** #include "stm32f4xx_it.h"
  23:Core/Src/stm32f4xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32f4xx_it.c **** /* USER CODE END Includes */
  26:Core/Src/stm32f4xx_it.c **** 
  27:Core/Src/stm32f4xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN TD */
  29:Core/Src/stm32f4xx_it.c **** 
  30:Core/Src/stm32f4xx_it.c **** /* USER CODE END TD */
ARM GAS  /tmp/ccsyf0P3.s 			page 2


  31:Core/Src/stm32f4xx_it.c **** 
  32:Core/Src/stm32f4xx_it.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PD */
  34:Core/Src/stm32f4xx_it.c **** 
  35:Core/Src/stm32f4xx_it.c **** /* USER CODE END PD */
  36:Core/Src/stm32f4xx_it.c **** 
  37:Core/Src/stm32f4xx_it.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PM */
  39:Core/Src/stm32f4xx_it.c **** 
  40:Core/Src/stm32f4xx_it.c **** /* USER CODE END PM */
  41:Core/Src/stm32f4xx_it.c **** 
  42:Core/Src/stm32f4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PV */
  44:Core/Src/stm32f4xx_it.c **** 
  45:Core/Src/stm32f4xx_it.c **** /* USER CODE END PV */
  46:Core/Src/stm32f4xx_it.c **** 
  47:Core/Src/stm32f4xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  48:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PFP */
  49:Core/Src/stm32f4xx_it.c **** 
  50:Core/Src/stm32f4xx_it.c **** /* USER CODE END PFP */
  51:Core/Src/stm32f4xx_it.c **** 
  52:Core/Src/stm32f4xx_it.c **** /* Private user code ---------------------------------------------------------*/
  53:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN 0 */
  54:Core/Src/stm32f4xx_it.c **** 
  55:Core/Src/stm32f4xx_it.c **** /* USER CODE END 0 */
  56:Core/Src/stm32f4xx_it.c **** 
  57:Core/Src/stm32f4xx_it.c **** /* External variables --------------------------------------------------------*/
  58:Core/Src/stm32f4xx_it.c **** extern DMA_HandleTypeDef hdma_adc1;
  59:Core/Src/stm32f4xx_it.c **** extern ADC_HandleTypeDef hadc1;
  60:Core/Src/stm32f4xx_it.c **** extern ADC_HandleTypeDef hadc3;
  61:Core/Src/stm32f4xx_it.c **** extern CAN_HandleTypeDef hcan1;
  62:Core/Src/stm32f4xx_it.c **** extern TIM_HandleTypeDef htim2;
  63:Core/Src/stm32f4xx_it.c **** extern TIM_HandleTypeDef htim6;
  64:Core/Src/stm32f4xx_it.c **** extern UART_HandleTypeDef huart1;
  65:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN EV */
  66:Core/Src/stm32f4xx_it.c **** 
  67:Core/Src/stm32f4xx_it.c **** /* USER CODE END EV */
  68:Core/Src/stm32f4xx_it.c **** 
  69:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
  70:Core/Src/stm32f4xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */
  71:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
  72:Core/Src/stm32f4xx_it.c **** /**
  73:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Non maskable interrupt.
  74:Core/Src/stm32f4xx_it.c ****   */
  75:Core/Src/stm32f4xx_it.c **** void NMI_Handler(void)
  76:Core/Src/stm32f4xx_it.c **** {
  29              		.loc 1 76 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.L2:
  77:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  78:Core/Src/stm32f4xx_it.c **** 
  79:Core/Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  80:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
ARM GAS  /tmp/ccsyf0P3.s 			page 3


  81:Core/Src/stm32f4xx_it.c ****   while (1)
  36              		.loc 1 81 3 view .LVU1
  82:Core/Src/stm32f4xx_it.c ****   {
  83:Core/Src/stm32f4xx_it.c ****   }
  37              		.loc 1 83 3 view .LVU2
  81:Core/Src/stm32f4xx_it.c ****   {
  38              		.loc 1 81 9 view .LVU3
  39 0000 FEE7     		b	.L2
  40              		.cfi_endproc
  41              	.LFE235:
  43              		.section	.text.HardFault_Handler,"ax",%progbits
  44              		.align	1
  45              		.global	HardFault_Handler
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  50              	HardFault_Handler:
  51              	.LFB236:
  84:Core/Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  85:Core/Src/stm32f4xx_it.c **** }
  86:Core/Src/stm32f4xx_it.c **** 
  87:Core/Src/stm32f4xx_it.c **** /**
  88:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Hard fault interrupt.
  89:Core/Src/stm32f4xx_it.c ****   */
  90:Core/Src/stm32f4xx_it.c **** void HardFault_Handler(void)
  91:Core/Src/stm32f4xx_it.c **** {
  52              		.loc 1 91 1 view -0
  53              		.cfi_startproc
  54              		@ Volatile: function does not return.
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.L4:
  92:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  93:Core/Src/stm32f4xx_it.c **** 
  94:Core/Src/stm32f4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  95:Core/Src/stm32f4xx_it.c ****   while (1)
  59              		.loc 1 95 3 view .LVU5
  96:Core/Src/stm32f4xx_it.c ****   {
  97:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  98:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  99:Core/Src/stm32f4xx_it.c ****   }
  60              		.loc 1 99 3 view .LVU6
  95:Core/Src/stm32f4xx_it.c ****   {
  61              		.loc 1 95 9 view .LVU7
  62 0000 FEE7     		b	.L4
  63              		.cfi_endproc
  64              	.LFE236:
  66              		.section	.text.MemManage_Handler,"ax",%progbits
  67              		.align	1
  68              		.global	MemManage_Handler
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  73              	MemManage_Handler:
  74              	.LFB237:
 100:Core/Src/stm32f4xx_it.c **** }
ARM GAS  /tmp/ccsyf0P3.s 			page 4


 101:Core/Src/stm32f4xx_it.c **** 
 102:Core/Src/stm32f4xx_it.c **** /**
 103:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Memory management fault.
 104:Core/Src/stm32f4xx_it.c ****   */
 105:Core/Src/stm32f4xx_it.c **** void MemManage_Handler(void)
 106:Core/Src/stm32f4xx_it.c **** {
  75              		.loc 1 106 1 view -0
  76              		.cfi_startproc
  77              		@ Volatile: function does not return.
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  81              	.L6:
 107:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 108:Core/Src/stm32f4xx_it.c **** 
 109:Core/Src/stm32f4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 110:Core/Src/stm32f4xx_it.c ****   while (1)
  82              		.loc 1 110 3 view .LVU9
 111:Core/Src/stm32f4xx_it.c ****   {
 112:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 113:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 114:Core/Src/stm32f4xx_it.c ****   }
  83              		.loc 1 114 3 view .LVU10
 110:Core/Src/stm32f4xx_it.c ****   {
  84              		.loc 1 110 9 view .LVU11
  85 0000 FEE7     		b	.L6
  86              		.cfi_endproc
  87              	.LFE237:
  89              		.section	.text.BusFault_Handler,"ax",%progbits
  90              		.align	1
  91              		.global	BusFault_Handler
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  96              	BusFault_Handler:
  97              	.LFB238:
 115:Core/Src/stm32f4xx_it.c **** }
 116:Core/Src/stm32f4xx_it.c **** 
 117:Core/Src/stm32f4xx_it.c **** /**
 118:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 119:Core/Src/stm32f4xx_it.c ****   */
 120:Core/Src/stm32f4xx_it.c **** void BusFault_Handler(void)
 121:Core/Src/stm32f4xx_it.c **** {
  98              		.loc 1 121 1 view -0
  99              		.cfi_startproc
 100              		@ Volatile: function does not return.
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104              	.L8:
 122:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 123:Core/Src/stm32f4xx_it.c **** 
 124:Core/Src/stm32f4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 125:Core/Src/stm32f4xx_it.c ****   while (1)
 105              		.loc 1 125 3 view .LVU13
 126:Core/Src/stm32f4xx_it.c ****   {
 127:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
ARM GAS  /tmp/ccsyf0P3.s 			page 5


 128:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 129:Core/Src/stm32f4xx_it.c ****   }
 106              		.loc 1 129 3 view .LVU14
 125:Core/Src/stm32f4xx_it.c ****   {
 107              		.loc 1 125 9 view .LVU15
 108 0000 FEE7     		b	.L8
 109              		.cfi_endproc
 110              	.LFE238:
 112              		.section	.text.UsageFault_Handler,"ax",%progbits
 113              		.align	1
 114              		.global	UsageFault_Handler
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 119              	UsageFault_Handler:
 120              	.LFB239:
 130:Core/Src/stm32f4xx_it.c **** }
 131:Core/Src/stm32f4xx_it.c **** 
 132:Core/Src/stm32f4xx_it.c **** /**
 133:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 134:Core/Src/stm32f4xx_it.c ****   */
 135:Core/Src/stm32f4xx_it.c **** void UsageFault_Handler(void)
 136:Core/Src/stm32f4xx_it.c **** {
 121              		.loc 1 136 1 view -0
 122              		.cfi_startproc
 123              		@ Volatile: function does not return.
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              		@ link register save eliminated.
 127              	.L10:
 137:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 138:Core/Src/stm32f4xx_it.c **** 
 139:Core/Src/stm32f4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 140:Core/Src/stm32f4xx_it.c ****   while (1)
 128              		.loc 1 140 3 view .LVU17
 141:Core/Src/stm32f4xx_it.c ****   {
 142:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 143:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 144:Core/Src/stm32f4xx_it.c ****   }
 129              		.loc 1 144 3 view .LVU18
 140:Core/Src/stm32f4xx_it.c ****   {
 130              		.loc 1 140 9 view .LVU19
 131 0000 FEE7     		b	.L10
 132              		.cfi_endproc
 133              	.LFE239:
 135              		.section	.text.SVC_Handler,"ax",%progbits
 136              		.align	1
 137              		.global	SVC_Handler
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 142              	SVC_Handler:
 143              	.LFB240:
 145:Core/Src/stm32f4xx_it.c **** }
 146:Core/Src/stm32f4xx_it.c **** 
 147:Core/Src/stm32f4xx_it.c **** /**
 148:Core/Src/stm32f4xx_it.c ****   * @brief This function handles System service call via SWI instruction.
ARM GAS  /tmp/ccsyf0P3.s 			page 6


 149:Core/Src/stm32f4xx_it.c ****   */
 150:Core/Src/stm32f4xx_it.c **** void SVC_Handler(void)
 151:Core/Src/stm32f4xx_it.c **** {
 144              		.loc 1 151 1 view -0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 152:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 153:Core/Src/stm32f4xx_it.c **** 
 154:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 155:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 156:Core/Src/stm32f4xx_it.c **** 
 157:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 158:Core/Src/stm32f4xx_it.c **** }
 149              		.loc 1 158 1 view .LVU21
 150 0000 7047     		bx	lr
 151              		.cfi_endproc
 152              	.LFE240:
 154              		.section	.text.DebugMon_Handler,"ax",%progbits
 155              		.align	1
 156              		.global	DebugMon_Handler
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
 161              	DebugMon_Handler:
 162              	.LFB241:
 159:Core/Src/stm32f4xx_it.c **** 
 160:Core/Src/stm32f4xx_it.c **** /**
 161:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Debug monitor.
 162:Core/Src/stm32f4xx_it.c ****   */
 163:Core/Src/stm32f4xx_it.c **** void DebugMon_Handler(void)
 164:Core/Src/stm32f4xx_it.c **** {
 163              		.loc 1 164 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 165:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 166:Core/Src/stm32f4xx_it.c **** 
 167:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 168:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 169:Core/Src/stm32f4xx_it.c **** 
 170:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 171:Core/Src/stm32f4xx_it.c **** }
 168              		.loc 1 171 1 view .LVU23
 169 0000 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE241:
 173              		.section	.text.PendSV_Handler,"ax",%progbits
 174              		.align	1
 175              		.global	PendSV_Handler
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 180              	PendSV_Handler:
 181              	.LFB242:
ARM GAS  /tmp/ccsyf0P3.s 			page 7


 172:Core/Src/stm32f4xx_it.c **** 
 173:Core/Src/stm32f4xx_it.c **** /**
 174:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Pendable request for system service.
 175:Core/Src/stm32f4xx_it.c ****   */
 176:Core/Src/stm32f4xx_it.c **** void PendSV_Handler(void)
 177:Core/Src/stm32f4xx_it.c **** {
 182              		.loc 1 177 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              		@ link register save eliminated.
 178:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 179:Core/Src/stm32f4xx_it.c **** 
 180:Core/Src/stm32f4xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 181:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 182:Core/Src/stm32f4xx_it.c **** 
 183:Core/Src/stm32f4xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 184:Core/Src/stm32f4xx_it.c **** }
 187              		.loc 1 184 1 view .LVU25
 188 0000 7047     		bx	lr
 189              		.cfi_endproc
 190              	.LFE242:
 192              		.section	.text.SysTick_Handler,"ax",%progbits
 193              		.align	1
 194              		.global	SysTick_Handler
 195              		.syntax unified
 196              		.thumb
 197              		.thumb_func
 199              	SysTick_Handler:
 200              	.LFB243:
 185:Core/Src/stm32f4xx_it.c **** 
 186:Core/Src/stm32f4xx_it.c **** /**
 187:Core/Src/stm32f4xx_it.c ****   * @brief This function handles System tick timer.
 188:Core/Src/stm32f4xx_it.c ****   */
 189:Core/Src/stm32f4xx_it.c **** void SysTick_Handler(void)
 190:Core/Src/stm32f4xx_it.c **** {
 201              		.loc 1 190 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205 0000 08B5     		push	{r3, lr}
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 3, -8
 208              		.cfi_offset 14, -4
 191:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 192:Core/Src/stm32f4xx_it.c **** 
 193:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 194:Core/Src/stm32f4xx_it.c ****   HAL_IncTick();
 209              		.loc 1 194 3 view .LVU27
 210 0002 FFF7FEFF 		bl	HAL_IncTick
 211              	.LVL0:
 195:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 196:Core/Src/stm32f4xx_it.c **** 
 197:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 198:Core/Src/stm32f4xx_it.c **** }
 212              		.loc 1 198 1 is_stmt 0 view .LVU28
 213 0006 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccsyf0P3.s 			page 8


 214              		.cfi_endproc
 215              	.LFE243:
 217              		.section	.text.ADC_IRQHandler,"ax",%progbits
 218              		.align	1
 219              		.global	ADC_IRQHandler
 220              		.syntax unified
 221              		.thumb
 222              		.thumb_func
 224              	ADC_IRQHandler:
 225              	.LFB244:
 199:Core/Src/stm32f4xx_it.c **** 
 200:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
 201:Core/Src/stm32f4xx_it.c **** /* STM32F4xx Peripheral Interrupt Handlers                                    */
 202:Core/Src/stm32f4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 203:Core/Src/stm32f4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 204:Core/Src/stm32f4xx_it.c **** /* please refer to the startup file (startup_stm32f4xx.s).                    */
 205:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
 206:Core/Src/stm32f4xx_it.c **** 
 207:Core/Src/stm32f4xx_it.c **** /**
 208:Core/Src/stm32f4xx_it.c ****   * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
 209:Core/Src/stm32f4xx_it.c ****   */
 210:Core/Src/stm32f4xx_it.c **** void ADC_IRQHandler(void)
 211:Core/Src/stm32f4xx_it.c **** {
 226              		.loc 1 211 1 is_stmt 1 view -0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230 0000 08B5     		push	{r3, lr}
 231              		.cfi_def_cfa_offset 8
 232              		.cfi_offset 3, -8
 233              		.cfi_offset 14, -4
 212:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN ADC_IRQn 0 */
 213:Core/Src/stm32f4xx_it.c **** 
 214:Core/Src/stm32f4xx_it.c ****   /* USER CODE END ADC_IRQn 0 */
 215:Core/Src/stm32f4xx_it.c ****   HAL_ADC_IRQHandler(&hadc1);
 234              		.loc 1 215 3 view .LVU30
 235 0002 0348     		ldr	r0, .L18
 236 0004 FFF7FEFF 		bl	HAL_ADC_IRQHandler
 237              	.LVL1:
 216:Core/Src/stm32f4xx_it.c ****   HAL_ADC_IRQHandler(&hadc3);
 238              		.loc 1 216 3 view .LVU31
 239 0008 0248     		ldr	r0, .L18+4
 240 000a FFF7FEFF 		bl	HAL_ADC_IRQHandler
 241              	.LVL2:
 217:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN ADC_IRQn 1 */
 218:Core/Src/stm32f4xx_it.c **** 
 219:Core/Src/stm32f4xx_it.c ****   /* USER CODE END ADC_IRQn 1 */
 220:Core/Src/stm32f4xx_it.c **** }
 242              		.loc 1 220 1 is_stmt 0 view .LVU32
 243 000e 08BD     		pop	{r3, pc}
 244              	.L19:
 245              		.align	2
 246              	.L18:
 247 0010 00000000 		.word	hadc1
 248 0014 00000000 		.word	hadc3
 249              		.cfi_endproc
 250              	.LFE244:
ARM GAS  /tmp/ccsyf0P3.s 			page 9


 252              		.section	.text.CAN1_TX_IRQHandler,"ax",%progbits
 253              		.align	1
 254              		.global	CAN1_TX_IRQHandler
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 259              	CAN1_TX_IRQHandler:
 260              	.LFB245:
 221:Core/Src/stm32f4xx_it.c **** 
 222:Core/Src/stm32f4xx_it.c **** /**
 223:Core/Src/stm32f4xx_it.c ****   * @brief This function handles CAN1 TX interrupt.
 224:Core/Src/stm32f4xx_it.c ****   */
 225:Core/Src/stm32f4xx_it.c **** void CAN1_TX_IRQHandler(void)
 226:Core/Src/stm32f4xx_it.c **** {
 261              		.loc 1 226 1 is_stmt 1 view -0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265 0000 08B5     		push	{r3, lr}
 266              		.cfi_def_cfa_offset 8
 267              		.cfi_offset 3, -8
 268              		.cfi_offset 14, -4
 227:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_TX_IRQn 0 */
 228:Core/Src/stm32f4xx_it.c **** 
 229:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_TX_IRQn 0 */
 230:Core/Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 269              		.loc 1 230 3 view .LVU34
 270 0002 0248     		ldr	r0, .L22
 271 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 272              	.LVL3:
 231:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_TX_IRQn 1 */
 232:Core/Src/stm32f4xx_it.c **** 
 233:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_TX_IRQn 1 */
 234:Core/Src/stm32f4xx_it.c **** }
 273              		.loc 1 234 1 is_stmt 0 view .LVU35
 274 0008 08BD     		pop	{r3, pc}
 275              	.L23:
 276 000a 00BF     		.align	2
 277              	.L22:
 278 000c 00000000 		.word	hcan1
 279              		.cfi_endproc
 280              	.LFE245:
 282              		.section	.text.CAN1_RX0_IRQHandler,"ax",%progbits
 283              		.align	1
 284              		.global	CAN1_RX0_IRQHandler
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 289              	CAN1_RX0_IRQHandler:
 290              	.LFB246:
 235:Core/Src/stm32f4xx_it.c **** 
 236:Core/Src/stm32f4xx_it.c **** /**
 237:Core/Src/stm32f4xx_it.c ****   * @brief This function handles CAN1 RX0 interrupt.
 238:Core/Src/stm32f4xx_it.c ****   */
 239:Core/Src/stm32f4xx_it.c **** void CAN1_RX0_IRQHandler(void)
 240:Core/Src/stm32f4xx_it.c **** {
 291              		.loc 1 240 1 is_stmt 1 view -0
ARM GAS  /tmp/ccsyf0P3.s 			page 10


 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295 0000 08B5     		push	{r3, lr}
 296              		.cfi_def_cfa_offset 8
 297              		.cfi_offset 3, -8
 298              		.cfi_offset 14, -4
 241:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
 242:Core/Src/stm32f4xx_it.c **** 
 243:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 0 */
 244:Core/Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 299              		.loc 1 244 3 view .LVU37
 300 0002 0248     		ldr	r0, .L26
 301 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 302              	.LVL4:
 245:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
 246:Core/Src/stm32f4xx_it.c **** 
 247:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 1 */
 248:Core/Src/stm32f4xx_it.c **** }
 303              		.loc 1 248 1 is_stmt 0 view .LVU38
 304 0008 08BD     		pop	{r3, pc}
 305              	.L27:
 306 000a 00BF     		.align	2
 307              	.L26:
 308 000c 00000000 		.word	hcan1
 309              		.cfi_endproc
 310              	.LFE246:
 312              		.section	.text.CAN1_RX1_IRQHandler,"ax",%progbits
 313              		.align	1
 314              		.global	CAN1_RX1_IRQHandler
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 319              	CAN1_RX1_IRQHandler:
 320              	.LFB247:
 249:Core/Src/stm32f4xx_it.c **** 
 250:Core/Src/stm32f4xx_it.c **** /**
 251:Core/Src/stm32f4xx_it.c ****   * @brief This function handles CAN1 RX1 interrupt.
 252:Core/Src/stm32f4xx_it.c ****   */
 253:Core/Src/stm32f4xx_it.c **** void CAN1_RX1_IRQHandler(void)
 254:Core/Src/stm32f4xx_it.c **** {
 321              		.loc 1 254 1 is_stmt 1 view -0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325 0000 08B5     		push	{r3, lr}
 326              		.cfi_def_cfa_offset 8
 327              		.cfi_offset 3, -8
 328              		.cfi_offset 14, -4
 255:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
 256:Core/Src/stm32f4xx_it.c **** 
 257:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX1_IRQn 0 */
 258:Core/Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 329              		.loc 1 258 3 view .LVU40
 330 0002 0248     		ldr	r0, .L30
 331 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 332              	.LVL5:
ARM GAS  /tmp/ccsyf0P3.s 			page 11


 259:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
 260:Core/Src/stm32f4xx_it.c **** 
 261:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX1_IRQn 1 */
 262:Core/Src/stm32f4xx_it.c **** }
 333              		.loc 1 262 1 is_stmt 0 view .LVU41
 334 0008 08BD     		pop	{r3, pc}
 335              	.L31:
 336 000a 00BF     		.align	2
 337              	.L30:
 338 000c 00000000 		.word	hcan1
 339              		.cfi_endproc
 340              	.LFE247:
 342              		.section	.text.CAN1_SCE_IRQHandler,"ax",%progbits
 343              		.align	1
 344              		.global	CAN1_SCE_IRQHandler
 345              		.syntax unified
 346              		.thumb
 347              		.thumb_func
 349              	CAN1_SCE_IRQHandler:
 350              	.LFB248:
 263:Core/Src/stm32f4xx_it.c **** 
 264:Core/Src/stm32f4xx_it.c **** /**
 265:Core/Src/stm32f4xx_it.c ****   * @brief This function handles CAN1 SCE interrupt.
 266:Core/Src/stm32f4xx_it.c ****   */
 267:Core/Src/stm32f4xx_it.c **** void CAN1_SCE_IRQHandler(void)
 268:Core/Src/stm32f4xx_it.c **** {
 351              		.loc 1 268 1 is_stmt 1 view -0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 0
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 355 0000 08B5     		push	{r3, lr}
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 3, -8
 358              		.cfi_offset 14, -4
 269:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_SCE_IRQn 0 */
 270:Core/Src/stm32f4xx_it.c **** 
 271:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_SCE_IRQn 0 */
 272:Core/Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 359              		.loc 1 272 3 view .LVU43
 360 0002 0248     		ldr	r0, .L34
 361 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 362              	.LVL6:
 273:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_SCE_IRQn 1 */
 274:Core/Src/stm32f4xx_it.c **** 
 275:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_SCE_IRQn 1 */
 276:Core/Src/stm32f4xx_it.c **** }
 363              		.loc 1 276 1 is_stmt 0 view .LVU44
 364 0008 08BD     		pop	{r3, pc}
 365              	.L35:
 366 000a 00BF     		.align	2
 367              	.L34:
 368 000c 00000000 		.word	hcan1
 369              		.cfi_endproc
 370              	.LFE248:
 372              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 373              		.align	1
 374              		.global	TIM2_IRQHandler
ARM GAS  /tmp/ccsyf0P3.s 			page 12


 375              		.syntax unified
 376              		.thumb
 377              		.thumb_func
 379              	TIM2_IRQHandler:
 380              	.LFB249:
 277:Core/Src/stm32f4xx_it.c **** 
 278:Core/Src/stm32f4xx_it.c **** /**
 279:Core/Src/stm32f4xx_it.c ****   * @brief This function handles TIM2 global interrupt.
 280:Core/Src/stm32f4xx_it.c ****   */
 281:Core/Src/stm32f4xx_it.c **** void TIM2_IRQHandler(void)
 282:Core/Src/stm32f4xx_it.c **** {
 381              		.loc 1 282 1 is_stmt 1 view -0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385 0000 08B5     		push	{r3, lr}
 386              		.cfi_def_cfa_offset 8
 387              		.cfi_offset 3, -8
 388              		.cfi_offset 14, -4
 283:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 284:Core/Src/stm32f4xx_it.c **** 
 285:Core/Src/stm32f4xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 286:Core/Src/stm32f4xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 389              		.loc 1 286 3 view .LVU46
 390 0002 0248     		ldr	r0, .L38
 391 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 392              	.LVL7:
 287:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 288:Core/Src/stm32f4xx_it.c **** 
 289:Core/Src/stm32f4xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 290:Core/Src/stm32f4xx_it.c **** }
 393              		.loc 1 290 1 is_stmt 0 view .LVU47
 394 0008 08BD     		pop	{r3, pc}
 395              	.L39:
 396 000a 00BF     		.align	2
 397              	.L38:
 398 000c 00000000 		.word	htim2
 399              		.cfi_endproc
 400              	.LFE249:
 402              		.section	.text.USART1_IRQHandler,"ax",%progbits
 403              		.align	1
 404              		.global	USART1_IRQHandler
 405              		.syntax unified
 406              		.thumb
 407              		.thumb_func
 409              	USART1_IRQHandler:
 410              	.LFB250:
 291:Core/Src/stm32f4xx_it.c **** 
 292:Core/Src/stm32f4xx_it.c **** /**
 293:Core/Src/stm32f4xx_it.c ****   * @brief This function handles USART1 global interrupt.
 294:Core/Src/stm32f4xx_it.c ****   */
 295:Core/Src/stm32f4xx_it.c **** void USART1_IRQHandler(void)
 296:Core/Src/stm32f4xx_it.c **** {
 411              		.loc 1 296 1 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccsyf0P3.s 			page 13


 415 0000 08B5     		push	{r3, lr}
 416              		.cfi_def_cfa_offset 8
 417              		.cfi_offset 3, -8
 418              		.cfi_offset 14, -4
 297:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 298:Core/Src/stm32f4xx_it.c **** 
 299:Core/Src/stm32f4xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 300:Core/Src/stm32f4xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 419              		.loc 1 300 3 view .LVU49
 420 0002 0248     		ldr	r0, .L42
 421 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 422              	.LVL8:
 301:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 302:Core/Src/stm32f4xx_it.c **** 
 303:Core/Src/stm32f4xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 304:Core/Src/stm32f4xx_it.c **** }
 423              		.loc 1 304 1 is_stmt 0 view .LVU50
 424 0008 08BD     		pop	{r3, pc}
 425              	.L43:
 426 000a 00BF     		.align	2
 427              	.L42:
 428 000c 00000000 		.word	huart1
 429              		.cfi_endproc
 430              	.LFE250:
 432              		.section	.text.TIM6_DAC_IRQHandler,"ax",%progbits
 433              		.align	1
 434              		.global	TIM6_DAC_IRQHandler
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 439              	TIM6_DAC_IRQHandler:
 440              	.LFB251:
 305:Core/Src/stm32f4xx_it.c **** 
 306:Core/Src/stm32f4xx_it.c **** /**
 307:Core/Src/stm32f4xx_it.c ****   * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
 308:Core/Src/stm32f4xx_it.c ****   */
 309:Core/Src/stm32f4xx_it.c **** void TIM6_DAC_IRQHandler(void)
 310:Core/Src/stm32f4xx_it.c **** {
 441              		.loc 1 310 1 is_stmt 1 view -0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 0
 444              		@ frame_needed = 0, uses_anonymous_args = 0
 445 0000 08B5     		push	{r3, lr}
 446              		.cfi_def_cfa_offset 8
 447              		.cfi_offset 3, -8
 448              		.cfi_offset 14, -4
 311:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
 312:Core/Src/stm32f4xx_it.c **** 
 313:Core/Src/stm32f4xx_it.c ****   /* USER CODE END TIM6_DAC_IRQn 0 */
 314:Core/Src/stm32f4xx_it.c ****   HAL_TIM_IRQHandler(&htim6);
 449              		.loc 1 314 3 view .LVU52
 450 0002 0248     		ldr	r0, .L46
 451 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 452              	.LVL9:
 315:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
 316:Core/Src/stm32f4xx_it.c **** 
 317:Core/Src/stm32f4xx_it.c ****   /* USER CODE END TIM6_DAC_IRQn 1 */
ARM GAS  /tmp/ccsyf0P3.s 			page 14


 318:Core/Src/stm32f4xx_it.c **** }
 453              		.loc 1 318 1 is_stmt 0 view .LVU53
 454 0008 08BD     		pop	{r3, pc}
 455              	.L47:
 456 000a 00BF     		.align	2
 457              	.L46:
 458 000c 00000000 		.word	htim6
 459              		.cfi_endproc
 460              	.LFE251:
 462              		.section	.text.DMA2_Stream0_IRQHandler,"ax",%progbits
 463              		.align	1
 464              		.global	DMA2_Stream0_IRQHandler
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 469              	DMA2_Stream0_IRQHandler:
 470              	.LFB252:
 319:Core/Src/stm32f4xx_it.c **** 
 320:Core/Src/stm32f4xx_it.c **** /**
 321:Core/Src/stm32f4xx_it.c ****   * @brief This function handles DMA2 stream0 global interrupt.
 322:Core/Src/stm32f4xx_it.c ****   */
 323:Core/Src/stm32f4xx_it.c **** void DMA2_Stream0_IRQHandler(void)
 324:Core/Src/stm32f4xx_it.c **** {
 471              		.loc 1 324 1 is_stmt 1 view -0
 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 0
 474              		@ frame_needed = 0, uses_anonymous_args = 0
 475 0000 08B5     		push	{r3, lr}
 476              		.cfi_def_cfa_offset 8
 477              		.cfi_offset 3, -8
 478              		.cfi_offset 14, -4
 325:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
 326:Core/Src/stm32f4xx_it.c **** 
 327:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream0_IRQn 0 */
 328:Core/Src/stm32f4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_adc1);
 479              		.loc 1 328 3 view .LVU55
 480 0002 0248     		ldr	r0, .L50
 481 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 482              	.LVL10:
 329:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
 330:Core/Src/stm32f4xx_it.c **** 
 331:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream0_IRQn 1 */
 332:Core/Src/stm32f4xx_it.c **** }
 483              		.loc 1 332 1 is_stmt 0 view .LVU56
 484 0008 08BD     		pop	{r3, pc}
 485              	.L51:
 486 000a 00BF     		.align	2
 487              	.L50:
 488 000c 00000000 		.word	hdma_adc1
 489              		.cfi_endproc
 490              	.LFE252:
 492              		.text
 493              	.Letext0:
 494              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 495              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 496              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 497              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
ARM GAS  /tmp/ccsyf0P3.s 			page 15


 498              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 499              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 500              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 501              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 502              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 503              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 504              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccsyf0P3.s 			page 16


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_it.c
     /tmp/ccsyf0P3.s:21     .text.NMI_Handler:00000000 $t
     /tmp/ccsyf0P3.s:27     .text.NMI_Handler:00000000 NMI_Handler
     /tmp/ccsyf0P3.s:44     .text.HardFault_Handler:00000000 $t
     /tmp/ccsyf0P3.s:50     .text.HardFault_Handler:00000000 HardFault_Handler
     /tmp/ccsyf0P3.s:67     .text.MemManage_Handler:00000000 $t
     /tmp/ccsyf0P3.s:73     .text.MemManage_Handler:00000000 MemManage_Handler
     /tmp/ccsyf0P3.s:90     .text.BusFault_Handler:00000000 $t
     /tmp/ccsyf0P3.s:96     .text.BusFault_Handler:00000000 BusFault_Handler
     /tmp/ccsyf0P3.s:113    .text.UsageFault_Handler:00000000 $t
     /tmp/ccsyf0P3.s:119    .text.UsageFault_Handler:00000000 UsageFault_Handler
     /tmp/ccsyf0P3.s:136    .text.SVC_Handler:00000000 $t
     /tmp/ccsyf0P3.s:142    .text.SVC_Handler:00000000 SVC_Handler
     /tmp/ccsyf0P3.s:155    .text.DebugMon_Handler:00000000 $t
     /tmp/ccsyf0P3.s:161    .text.DebugMon_Handler:00000000 DebugMon_Handler
     /tmp/ccsyf0P3.s:174    .text.PendSV_Handler:00000000 $t
     /tmp/ccsyf0P3.s:180    .text.PendSV_Handler:00000000 PendSV_Handler
     /tmp/ccsyf0P3.s:193    .text.SysTick_Handler:00000000 $t
     /tmp/ccsyf0P3.s:199    .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/ccsyf0P3.s:218    .text.ADC_IRQHandler:00000000 $t
     /tmp/ccsyf0P3.s:224    .text.ADC_IRQHandler:00000000 ADC_IRQHandler
     /tmp/ccsyf0P3.s:247    .text.ADC_IRQHandler:00000010 $d
     /tmp/ccsyf0P3.s:253    .text.CAN1_TX_IRQHandler:00000000 $t
     /tmp/ccsyf0P3.s:259    .text.CAN1_TX_IRQHandler:00000000 CAN1_TX_IRQHandler
     /tmp/ccsyf0P3.s:278    .text.CAN1_TX_IRQHandler:0000000c $d
     /tmp/ccsyf0P3.s:283    .text.CAN1_RX0_IRQHandler:00000000 $t
     /tmp/ccsyf0P3.s:289    .text.CAN1_RX0_IRQHandler:00000000 CAN1_RX0_IRQHandler
     /tmp/ccsyf0P3.s:308    .text.CAN1_RX0_IRQHandler:0000000c $d
     /tmp/ccsyf0P3.s:313    .text.CAN1_RX1_IRQHandler:00000000 $t
     /tmp/ccsyf0P3.s:319    .text.CAN1_RX1_IRQHandler:00000000 CAN1_RX1_IRQHandler
     /tmp/ccsyf0P3.s:338    .text.CAN1_RX1_IRQHandler:0000000c $d
     /tmp/ccsyf0P3.s:343    .text.CAN1_SCE_IRQHandler:00000000 $t
     /tmp/ccsyf0P3.s:349    .text.CAN1_SCE_IRQHandler:00000000 CAN1_SCE_IRQHandler
     /tmp/ccsyf0P3.s:368    .text.CAN1_SCE_IRQHandler:0000000c $d
     /tmp/ccsyf0P3.s:373    .text.TIM2_IRQHandler:00000000 $t
     /tmp/ccsyf0P3.s:379    .text.TIM2_IRQHandler:00000000 TIM2_IRQHandler
     /tmp/ccsyf0P3.s:398    .text.TIM2_IRQHandler:0000000c $d
     /tmp/ccsyf0P3.s:403    .text.USART1_IRQHandler:00000000 $t
     /tmp/ccsyf0P3.s:409    .text.USART1_IRQHandler:00000000 USART1_IRQHandler
     /tmp/ccsyf0P3.s:428    .text.USART1_IRQHandler:0000000c $d
     /tmp/ccsyf0P3.s:433    .text.TIM6_DAC_IRQHandler:00000000 $t
     /tmp/ccsyf0P3.s:439    .text.TIM6_DAC_IRQHandler:00000000 TIM6_DAC_IRQHandler
     /tmp/ccsyf0P3.s:458    .text.TIM6_DAC_IRQHandler:0000000c $d
     /tmp/ccsyf0P3.s:463    .text.DMA2_Stream0_IRQHandler:00000000 $t
     /tmp/ccsyf0P3.s:469    .text.DMA2_Stream0_IRQHandler:00000000 DMA2_Stream0_IRQHandler
     /tmp/ccsyf0P3.s:488    .text.DMA2_Stream0_IRQHandler:0000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_ADC_IRQHandler
hadc1
hadc3
HAL_CAN_IRQHandler
hcan1
HAL_TIM_IRQHandler
htim2
ARM GAS  /tmp/ccsyf0P3.s 			page 17


HAL_UART_IRQHandler
huart1
htim6
HAL_DMA_IRQHandler
hdma_adc1
