# -----------------------------------------------------------------------------
# Title  : Cmake makefile for stm32 compilation with cubeMX
# Author : Simone Ruffini <simone.ruffini.work@gmail.com>
# Date   : Wed May 17 10:37:43 PM CEST 2023
# Notes  :
#
# License:
#  "THE BEER-WARE LICENSE" (Revision 69):
#  Squadra Corse firmware team wrote this project. As long as you retain this
#  notice you can do whatever you want with this stuff. If we meet some day,
#  and you think this stuff is worth it, you can buy us a beer in return.
# Copyright squadracorsepolito.it
# -----------------------------------------------------------------------------

.PHONY: all build cmake flash clean erase can_flash_rear can_flash_front

BUILD_DIR := build

PROJECT_NAME = sensor_board


CAN_TX_HEX_ID_FRONT = A
CAN_RX_HEX_ID_FRONT = 184
CAN_TX_HEX_ID_REAR = B
CAN_RX_HEX_ID_REAR = 185



# Build type: Debug|Release
# By default = Debug
BUILD_TYPE ?= Debug


# Handy renames 
TARGET = $(PROJECT_NAME)


#######################################
# all - default action
#######################################
all: build

# Makefile generated by CMAKE
${BUILD_DIR}/Makefile:
    # -B: specify build directory where to store files/generate makefile
    # -D: cmake options when CMakeList.txt is evaluated
    #   - CMAKE_BUILD_DIR: where to put artifacts of the evaluation/buid
    #   - CMAKE_EXPORT_COMPILE_COMMANDS: export the compilation units compile
    #     commands in a file called "compile_commands.json" in the build directory
	cmake \
		-B${BUILD_DIR} \
		-DPROJECT_NAME=${PROJECT_NAME} \
		-DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
		-DCMAKE_EXPORT_COMPILE_COMMANDS=true 

cmake: ${BUILD_DIR}/Makefile
	# Always touch the CMakeList so that it gets re-evaluated on the next build
	# Use this hack for GLOBS
	touch ./CMakeLists.txt

build: cmake
	# -j: use alla available threads
    # -C: change to BUILD_DIR directory
    # --no-print-directory: don't show the above directory change in the log
	$(MAKE) -j -C ${BUILD_DIR} --no-print-directory


#######################################
# clean
#######################################
clean:
	rm -rf -fR $(BUILD_DIR)

#######################################
# erase flash of micro
#######################################
erase:
	openocd -f ./openocd.cfg -c "init; reset halt; stm32f4x mass_erase 0; exit"

#######################################
# flash
#######################################
# Generating the .elf/.hex/.bin depends on running CMAKE and generating the makefile

$(BUILD_DIR)/$(TARGET).elf: build
$(BUILD_DIR)/$(TARGET).hex: build
$(BUILD_DIR)/$(TARGET).bin: build

# Flashing can happen only if the compile output is built
flash: $(BUILD_DIR)/$(TARGET).elf
	openocd -f ./openocd.cfg -c "program $(BUILD_DIR)/$(TARGET).elf verify reset exit"

#######################################
# debug
#######################################
#debug: $(BUILD_DIR)/$(TARGET).elf
#	"/run/current-system/sw/bin/openocd" -f ./openocd.cfg -c "init; reset halt; stm32f4x mass_erase 0; exit"


$(BUILD_DIR)/$(TARGET)_shifted.sx : $(BUILD_DIR)/$(TARGET)_shifted.bin
	bin2srec -a $$(grep 'FLASH (rx)      : ORIGIN =' STM32F446RETx_FLASH_shifted.ld | awk '{print $$6}' | sed 's/.$$//') \
		-i $(BUILD_DIR)/$(TARGET)_shifted.bin -o $(BUILD_DIR)/$(TARGET)_shifted.sx


#######################################
# can flash rear
#######################################
can_flash_rear: $(BUILD_DIR)/$(TARGET)_shifted.sx
	bootcommander -t=xcp_can -d=can0 -b=1000000 -tid=$(CAN_TX_HEX_ID_REAR)h -rid=$(CAN_RX_HEX_ID_REAR)h $(BUILD_DIR)/$(TARGET)_shifted.sx

#######################################
# can flash front
#######################################
can_flash_front: $(BUILD_DIR)/$(TARGET)_shifted.sx
	bootcommander -t=xcp_can -d=can0 -b=1000000 -tid=$(CAN_TX_HEX_ID_FRONT)h -rid=$(CAN_RX_HEX_ID_REAR)h $(BUILD_DIR)/$(TARGET)_shifted.sx


